apply plugin: 'kotlin-android' // well to use Kotlin
apply plugin: 'kotlin-kapt' // Kotlin Annotation Processing Tool

android {
//    buildToolsVersion '30.0.3'
    compileSdkVersion 30
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        androidTest {
            java.srcDirs = ['androidTest']
        }
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
        exclude 'META-INF/atomicfu.kotlin_module' // added to prevent warnings when using Room
    }
    defaultConfig {
        applicationId "com.boliao.eod"
        minSdkVersion 26
        targetSdkVersion 30
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        // to eliminate findViewByID
        viewBinding true
    }
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/arm64-v8a/").mkdirs();
    file("libs/x86_64/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.getByName("natives").copy().files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")        
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.boliao.eod/AndroidLauncher'
}

dependencies {
    implementation "androidx.core:core-ktx:$ktxVer"
    implementation "androidx.appcompat:appcompat:$mainVer"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "com.firebase:firebase-jobdispatcher:0.8.6"
    implementation ("com.google.android.gms:play-services-location:17.1.0") {
        exclude group: 'com.android.support'
    }

    // non-core but used widely in MAD
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVer"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVer"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVer"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archVer"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archVer"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archVer"
    implementation "androidx.activity:activity-ktx:1.3.0-alpha02"
    implementation "androidx.room:room-runtime:$roomVer" // essential runtime
    kapt "androidx.room:room-compiler:$roomVer" // to compile kotlin annotations
    implementation "androidx.room:room-ktx:$roomVer" // extensions and coroutines
    implementation "androidx.work:work-runtime:$workVer"
    implementation "androidx.work:work-runtime-ktx:$workVer"
    implementation "android.arch.work:work-runtime:1.0.1"

    // other libs
    implementation 'com.android.volley:volley:1.1.1'

    // core tests
    androidTestImplementation "androidx.test:core:$mainVer"
    androidTestImplementation "androidx.test:runner:$mainVer"
    androidTestImplementation "androidx.test:rules:$mainVer"

    // Espresso
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVer"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVer"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVer"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVer"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVer"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVer"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoVer"
    androidTestImplementation "androidx.work:work-testing:$workVer"
    androidTestImplementation "androidx.room:room-testing:$roomVer"

    // Assertions
    androidTestImplementation "androidx.test.ext:truth:$testVer"
    androidTestImplementation 'com.google.truth:truth:1.0'
}

repositories {
    mavenCentral()
}
